library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity sensor is
    Port (
        clk : in STD_LOGIC;  -- Clock de 100MHz
        trig : out STD_LOGIC;  -- Pino Trigger do HC-SR04
        echo : in STD_LOGIC;  -- Pino Echo do HC-SR04
        sensor_out : out STD_LOGIC;
        distance : out std_logic_vector(15 downto 0)
    );
end sensor;

architecture Behavioral of sensor is
    signal last_echo : STD_LOGIC := '0';  -- Sinal para armazenar o último estado de 'echo'
    signal echo_start : boolean := false;
    signal timer : unsigned(15 downto 0) := (others => '0');
    signal sig_distance : unsigned(15 downto 0) := (others => '0');
    signal sensor_sig : std_logic := '0';

    -- Definição dos sinais
    signal trigger_pulse_count    : integer := 0;
    signal trigger_interval_count : integer := 0;
    signal trigger_active         : std_logic := '0';

    -- Definição das constantes
    constant PULSE_LENGTH    : integer := 1000;        -- 10 us, 1000 ciclos de 10 ns cada
    constant INTERVAL_LENGTH : integer := 6000000;     -- 60 ms, 6000000 ciclos de 10 ns cada

    
begin
    -- Ultrasonic measurement process
    ultrasonic_process: process(clk)
  begin
    if rising_edge(clk) then
        -- Atualiza o estado anterior de 'echo'
        last_echo <= echo;

        if echo = '1' and not echo_start then
            -- Início do pulso de 'echo'
            echo_start <= true;
            timer <= (others => '0');
        elsif last_echo = '1' and echo = '0' then
            -- Fim do pulso de 'echo', borda de descida detectada
            echo_start <= false;
            sensor_sig <= '1';  -- Sinaliza que o pulso de 'echo' terminou
            sig_distance <= timer / 58;  -- Convers?o de tempo para distância
        else
            sensor_sig <= '0';  -- Reseta 'sensor_sig' se n?o houver borda de descida
        end if;
        
        if echo_start then
            -- Contagem do tempo enquanto 'echo' está alto
            timer <= timer + 1;
        end if;
    end if;
    distance <= std_logic_vector(sig_distance); 
end process;
  
    sensor_out <= sensor_sig;
    
    trig_process: process(clk)
    begin
        if rising_edge(clk) then
            if trigger_active = '1' then
                if trigger_pulse_count < PULSE_LENGTH then
                    trig <= '1';  -- Mantém o trigger alto
                    trigger_pulse_count <= trigger_pulse_count + 1;
                else
                    trig <= '0';  -- Desativa o trigger após 10 us
                    trigger_active <= '0';
                    trigger_pulse_count <= 0;
                    trigger_interval_count <= 0;  -- Inicia a contagem do intervalo
                end if;
            elsif trigger_interval_count < INTERVAL_LENGTH then
                trigger_interval_count <= trigger_interval_count + 1;
            else
                trigger_active <= '1';  -- Reativa o trigger após 60 ms
            end if;
        end if;
    end process;
    
end Behavioral;
